/// This file is generated by Flame Workspace.


/// Do not edit it manually.


// ignore_for_file: unused_import


import 'package:flame/camera.dart';

import 'package:flame/components.dart';


import 'package:flame/collisions.dart';


import 'package:flame/effects.dart';


import 'package:flame/experimental.dart';


import 'package:flame/events.dart';


import 'package:flame/input.dart';


import 'package:flame/palette.dart';


import 'package:flame/particles.dart';


import 'package:flame/layout.dart';


import 'package:flame/sprite.dart';


import 'package:flame/text.dart';


import 'package:flame_workspace_core/flame_workspace_core.dart';


import 'package:flutter/widgets.dart';


import 'package:template/scenes/scene_one.dart';


void setPropertyMyCircle(

    MyCircle classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyMySquare(

    MySquare classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'radius':

      classReference.radius = value as double;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyAnchorEffect(

    AnchorEffect classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'onComplete':

      classReference.onComplete = value as void Function();


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyButtonComponent(

    ButtonComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'button':

      classReference.button = value as PositionComponent;


      break;


    case 'buttonDown':

      classReference.buttonDown = value as PositionComponent;


      break;


    case 'onPressed':

      classReference.onPressed = value as void Function();


      break;


    case 'onReleased':

      classReference.onReleased = value as void Function();


      break;


    case 'onCancelled':

      classReference.onCancelled = value as void Function();


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyCameraComponent(

    CameraComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'world':

      classReference.world = value as World;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyCircleComponent(

    CircleComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    case 'paint':

      classReference.paint = value as Paint;


      break;


    case 'paintLayers':

      classReference.paintLayers = value as List<Paint>;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyClipComponent(

    ClipComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyCompositeHitbox(

    CompositeHitbox classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyCustomPainterComponent(

    CustomPainterComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'painter':

      classReference.painter = value as CustomPainter;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyEffect(

    Effect classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'onComplete':

      classReference.onComplete = value as void Function();


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyFpsTextComponent(

    FpsTextComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'textRenderer':

      classReference.textRenderer = value as dynamic;


      break;


    case 'position':

      classReference.position = value as dynamic;


      break;


    case 'size':

      classReference.size = value as dynamic;


      break;


    case 'scale':

      classReference.scale = value as dynamic;


      break;


    case 'angle':

      classReference.angle = value as dynamic;


      break;


    case 'anchor':

      classReference.anchor = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyHudButtonComponent(

    HudButtonComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'button':

      classReference.button = value as PositionComponent;


      break;


    case 'buttonDown':

      classReference.buttonDown = value as PositionComponent;


      break;


    case 'onPressed':

      classReference.onPressed = value as void Function();


      break;


    case 'onReleased':

      classReference.onReleased = value as void Function();


      break;


    case 'onCancelled':

      classReference.onCancelled = value as void Function();


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyHudMarginComponent(

    HudMarginComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'margin':

      classReference.margin = value as EdgeInsets;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyIsometricTileMapComponent(

    IsometricTileMapComponent classReference,

    String propertyName,

    dynamic value) {

  switch (propertyName) {

    case 'tileset':

      classReference.tileset = value as SpriteSheet;


      break;


    case 'matrix':

      classReference.matrix = value as List<List<int>>;


      break;


    case 'destTileSize':

      classReference.destTileSize = value as Vector2;


      break;


    case 'tileHeight':

      classReference.tileHeight = value as double;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyJoystickComponent(

    JoystickComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'margin':

      classReference.margin = value as EdgeInsets;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyMoveEffect(

    MoveEffect classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'onComplete':

      classReference.onComplete = value as void Function();


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyNineTileBoxComponent(

    NineTileBoxComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'nineTileBox':

      classReference.nineTileBox = value as NineTileBox;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyParallaxComponent(

    ParallaxComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyParticleSystemComponent(ParticleSystemComponent classReference,

    String propertyName, dynamic value) {

  switch (propertyName) {

    case 'particle':

      classReference.particle = value as Particle;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyPolygonComponent(

    PolygonComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    case 'paint':

      classReference.paint = value as Paint;


      break;


    case 'paintLayers':

      classReference.paintLayers = value as List<Paint>;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyPositionComponent(

    PositionComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'nativeAngle':

      classReference.nativeAngle = value as double;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyShapeComponent(

    ShapeComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertySpawnComponent(

    SpawnComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'factory':

      classReference.factory = value as PositionComponent Function(int amount);


      break;


    case 'area':

      classReference.area = value as Shape;


      break;


    case 'within':

      classReference.within = value as bool;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertySpriteAnimationComponent(

    SpriteAnimationComponent classReference,

    String propertyName,

    dynamic value) {

  switch (propertyName) {

    case 'removeOnFinish':

      classReference.removeOnFinish = value as bool;


      break;


    case 'playing':

      classReference.playing = value as bool;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'nativeAngle':

      classReference.nativeAngle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertySpriteAnimationGroupComponent(

    SpriteAnimationGroupComponent classReference,

    String propertyName,

    dynamic value) {

  switch (propertyName) {

    case 'playing':

      classReference.playing = value as bool;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'nativeAngle':

      classReference.nativeAngle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertySpriteBatchComponent(

    SpriteBatchComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'spriteBatch':

      classReference.spriteBatch = value as SpriteBatch;


      break;


    case 'blendMode':

      classReference.blendMode = value as BlendMode;


      break;


    case 'cullRect':

      classReference.cullRect = value as Rect;


      break;


    case 'paint':

      classReference.paint = value as Paint;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertySpriteComponent(

    SpriteComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'nativeAngle':

      classReference.nativeAngle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertySpriteGroupComponent(

    SpriteGroupComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'nativeAngle':

      classReference.nativeAngle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyTextBoxComponent(

    TextBoxComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'text':

      classReference.text = value as String;


      break;


    case 'textRenderer':

      classReference.textRenderer = value as dynamic;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyTextComponent(

    TextComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}


void setPropertyTextElementComponent(

    TextElementComponent classReference, String propertyName, dynamic value) {

  switch (propertyName) {

    case 'element':

      classReference.element = value as TextElement;


      break;


    case 'position':

      classReference.position = value as Vector2;


      break;


    case 'size':

      classReference.size = value as Vector2;


      break;


    case 'scale':

      classReference.scale = value as Vector2;


      break;


    case 'angle':

      classReference.angle = value as double;


      break;


    case 'anchor':

      classReference.anchor = value as Anchor;


      break;


    case 'priority':

      classReference.priority = value as dynamic;


      break;


    default:

      throw Exception('Property not found');

  }

}

