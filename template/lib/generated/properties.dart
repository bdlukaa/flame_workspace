/// This file is generated by Flame Workspace.
/// Do not edit it manually.

// ignore_for_file: unused_import, unnecessary_import, unnecessary_this
import 'package:flame/camera.dart';
import 'package:flame/components.dart';
import 'package:flame/collisions.dart';
import 'package:flame/effects.dart';
import 'package:flame/experimental.dart';
import 'package:flame/events.dart';
import 'package:flame/input.dart';
import 'package:flame/palette.dart';
import 'package:flame/particles.dart';
import 'package:flame/layout.dart';
import 'package:flame/sprite.dart';
import 'package:flame/text.dart';
import 'package:flame_workspace_core/flame_workspace_core.dart';
import 'package:flutter/widgets.dart';
import 'package:template/scenes/scene_one.dart';

extension SetPropertyMySquareExtension on MySquare {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'radius':
        this.radius = value as double;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyAnchorEffectExtension on AnchorEffect {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'onComplete':
        this.onComplete = value as void Function();
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyButtonComponentExtension on ButtonComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'button':
        this.button = value as PositionComponent;
        break;
      case 'buttonDown':
        this.buttonDown = value as PositionComponent;
        break;
      case 'onPressed':
        this.onPressed = value as void Function();
        break;
      case 'onReleased':
        this.onReleased = value as void Function();
        break;
      case 'onCancelled':
        this.onCancelled = value as void Function();
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyCameraComponentExtension on CameraComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'world':
        this.world = value as World;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyCircleComponentExtension on CircleComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyCircleHitboxExtension on CircleHitbox {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyClipComponentExtension on ClipComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyCompositeHitboxExtension on CompositeHitbox {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyCustomPainterComponentExtension on CustomPainterComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'painter':
        this.painter = value as CustomPainter;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyEffectExtension on Effect {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'onComplete':
        this.onComplete = value as void Function();
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyFpsTextComponentExtension on FpsTextComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'textRenderer':
        this.textRenderer = value as dynamic;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyHudButtonComponentExtension on HudButtonComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'button':
        this.button = value as PositionComponent;
        break;
      case 'buttonDown':
        this.buttonDown = value as PositionComponent;
        break;
      case 'onPressed':
        this.onPressed = value as void Function();
        break;
      case 'onReleased':
        this.onReleased = value as void Function();
        break;
      case 'onCancelled':
        this.onCancelled = value as void Function();
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyHudMarginComponentExtension on HudMarginComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'margin':
        this.margin = value as EdgeInsets;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyIsometricTileMapComponentExtension
    on IsometricTileMapComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'tileset':
        this.tileset = value as SpriteSheet;
        break;
      case 'matrix':
        this.matrix = value as List<List<int>>;
        break;
      case 'destTileSize':
        this.destTileSize = value as Vector2;
        break;
      case 'tileHeight':
        this.tileHeight = value as double;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyJoystickComponentExtension on JoystickComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'margin':
        this.margin = value as EdgeInsets;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyMoveEffectExtension on MoveEffect {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'onComplete':
        this.onComplete = value as void Function();
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyNineTileBoxComponentExtension on NineTileBoxComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'nineTileBox':
        this.nineTileBox = value as NineTileBox;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyParallaxComponentExtension on ParallaxComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyParticleSystemComponentExtension
    on ParticleSystemComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'particle':
        this.particle = value as Particle;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyPolygonComponentExtension on PolygonComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyPolygonHitboxExtension on PolygonHitbox {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyPositionComponentExtension on PositionComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'nativeAngle':
        this.nativeAngle = value as double;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyRectangleComponentExtension on RectangleComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      case 'paint':
        this.paint = value as Paint;
        break;
      case 'paintLayers':
        this.paintLayers = value as List<Paint>;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyShapeComponentExtension on ShapeComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertySpawnComponentExtension on SpawnComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'factory':
        this.factory = value as PositionComponent Function(int amount);
        break;
      case 'area':
        this.area = value as Shape;
        break;
      case 'within':
        this.within = value as bool;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertySpriteAnimationComponentExtension
    on SpriteAnimationComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'removeOnFinish':
        this.removeOnFinish = value as bool;
        break;
      case 'playing':
        this.playing = value as bool;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'nativeAngle':
        this.nativeAngle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertySpriteAnimationGroupComponentExtension
    on SpriteAnimationGroupComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'playing':
        this.playing = value as bool;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'nativeAngle':
        this.nativeAngle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertySpriteBatchComponentExtension on SpriteBatchComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'spriteBatch':
        this.spriteBatch = value as SpriteBatch;
        break;
      case 'blendMode':
        this.blendMode = value as BlendMode;
        break;
      case 'cullRect':
        this.cullRect = value as Rect;
        break;
      case 'paint':
        this.paint = value as Paint;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertySpriteComponentExtension on SpriteComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'nativeAngle':
        this.nativeAngle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertySpriteGroupComponentExtension on SpriteGroupComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'nativeAngle':
        this.nativeAngle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyTextBoxComponentExtension on TextBoxComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyTextComponentExtension on TextComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}

extension SetPropertyTextElementComponentExtension on TextElementComponent {
  void setProperty(String propertyName, dynamic value) {
    switch (propertyName) {
      case 'element':
        this.element = value as TextElement;
        break;
      case 'position':
        this.position = value as Vector2;
        break;
      case 'size':
        this.size = value as Vector2;
        break;
      case 'scale':
        this.scale = value as Vector2;
        break;
      case 'angle':
        this.angle = value as double;
        break;
      case 'anchor':
        this.anchor = value as Anchor;
        break;
      case 'priority':
        this.priority = value as dynamic;
        break;
      default:
        throw Exception('Property not found');
    }
  }
}
